BROKER SCHEMA com.ibm.test.dac


CREATE COMPUTE MODULE TestArrayDelete_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		DECLARE rEnv		REFERENCE TO Environment;
		CREATE FIELD rEnv.Variables;
		DECLARE rEnvVar		REFERENCE TO rEnv.Variables;
		CREATE LASTCHILD OF rEnvVar DOMAIN 'JSON';
		
		SET rEnvVar.JSON.Data.test1 = InputRoot.JSON.Data;
		SET rEnvVar.JSON.Data.test2 = InputRoot.JSON.Data;
		SET rEnvVar.JSON.Data.test3 = InputRoot.JSON.Data;
		SET rEnvVar.JSON.Data.test4 = InputRoot.JSON.Data;
		SET rEnvVar.JSON.Data.test5 = InputRoot.JSON.Data;
		
		DECLARE rTest1		REFERENCE TO rEnvVar.JSON.Data.test1;
		DECLARE rTest2		REFERENCE TO rEnvVar.JSON.Data.test2;
		DECLARE rTest3		REFERENCE TO rEnvVar.JSON.Data.test3;
		DECLARE rTest4		REFERENCE TO rEnvVar.JSON.Data.test4;
		DECLARE rTest5		REFERENCE TO rEnvVar.JSON.Data.test5;
		
		
		-- Test 1
		---------
		SET rTest1.array1 = null;
		
		
		-- Test 2
		---------
		DELETE FIELD rTest2.array1;	
		CREATE FIELD rTest2.array1 VALUE '';
		
		
		-- Test 3
		-- Try to avoid using CARDINALITY, if you can. HUGE performance issues if there are large arrays
		------------------------------------------------------------------------------------------------
		DECLARE elementCount INTEGER CARDINALITY(rTest3.array1.*[]);
		DECLARE i INTEGER 1;
		WHILE i < elementCount +1 DO
			DELETE LASTCHILD OF rTest3.array1;
			SET i = i+1;
		END WHILE;
		
		
		-- Test 4
		---------
		WHILE EXISTS(rTest4.array1.Item[]) DO
			DELETE FIELD rTest4.array1.Item[<];
		END WHILE;
			
			
		-- Test 5
		---------
		SET rTest5.array1 = null;
		CREATE FIELD rTest5.array1 IDENTITY(JSON.Array) array1;
		
		

		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';		
		SET OutputRoot.JSON.Data = rEnvVar.JSON.Data;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
