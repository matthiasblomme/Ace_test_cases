BROKER SCHEMA com.mbl.json.parser


CREATE COMPUTE MODULE ValidateJson_nok
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		SET OutputRoot.JSON.Data.Result='JSON Invalid';
		
		CALL getParserDetail(InputExceptionList);
		
		SET OutputRoot.JSON.Data.Details=Environment.variables;
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
	CREATE PROCEDURE getParserDetail(IN InputTree reference)	
    /****************************************************************************
	 * A procedure that will get the details of the last exception from a message
	 * IN InputTree:  The incoming exception list
	 * IN messageNumber:  The last message numberr.
	 * IN messageText: The last message text.
	 *****************************************************************************/
   BEGIN
   	    -- Create a reference to the first child of the exception list
   	    declare ptrException reference to InputTree.*[1];
   	    -- keep looping while the moves to the child of exception list work 
   	    DECLARE count INTEGER 1;
		WHILE lastmove(ptrException) DO
			-- more then one parserException
			DECLARE parserCount INTEGER CARDINALITY(ptrException.ParserException[]);
			IF (parserCount > 1) THEN
				DECLARE parserException REFERENCE TO ptrException.ParserException[1];
				WHILE lastmove(parserException) DO
					SET Environment.variables.parserError[count].errorNumber = count;
					SET Environment.variables.parserError[count].errorReason = '';
					DECLARE insertException REFERENCE TO parserException.Insert[1];
					WHILE LASTMOVE(insertException) DO
						SET Environment.variables.parserError[count].errorReason = Environment.variables.parserError[count].errorReason || ' | ' || insertException.Text;
						MOVE insertException NEXTSIBLING;
					END WHILE;
					SET count = count + 1;
					MOVE parserException NEXTSIBLING;
				END WHILE;					
			END IF;	
			
			move ptrException lastchild;		
		END WHILE; 
	END;
END MODULE;
