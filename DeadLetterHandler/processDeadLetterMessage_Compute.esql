DECLARE DlqBackoutQueue EXTERNAL CHARACTER 'SYSTEM.DEAD.LETTER.HOLD.QUEUE';

CREATE COMPUTE MODULE processDeadLetterMessage_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- dynamically set target queue
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = COALESCE(InputRoot.MQDLH.DestQName, DlqBackoutQueue);

		-- copy input message without dlh
		CALL CopyEntireMessage();
		IF (CARDINALITY(InputRoot.MQDLH[]) > 0) THEN
			DELETE FIELD OutputRoot.MQDLH;
		END IF;

		-- set correct mqmd format
		IF (CARDINALITY(InputRoot.MQRFH2[]) > 0) THEN
			SET OutputRoot.MQMD.Format = MQRFH_VERSION_2;
		ELSE
			SET OutputRoot.MQMD.Format = 'MQSTR';
		END IF;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
