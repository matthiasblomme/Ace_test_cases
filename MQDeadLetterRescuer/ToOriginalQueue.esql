DECLARE holdQueueName EXTERNAL CHARACTER '';

CREATE COMPUTE MODULE ToOriginalQueue
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
	  -- generate unique id
      SET Environment.Variables.ActivityId = UUIDASCHAR;

	  CALL CopyEntireMessage();	
	  --set destination queue name 
	  SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = COALESCE(InputRoot.MQDLH.DestQName,holdQueueName);
       
       --check if MQDLH header exists
       IF CARDINALITY(InputRoot.MQDLH[]) > 0 THEN
   
        	DELETE FIELD OutputRoot.MQDLH;
       END IF;
       
       IF CARDINALITY(InputRoot.MQRFH2[])>0 THEN
       	SET OutputRoot.MQMD.Format = MQRFH_VERSION_2;
       ELSE
       	SET OutputRoot.MQMD.Format = 'MQSTR';
       END IF;
       
       --handel log
       SET Environment.Variables.Log.Entry.type = 'INFO';
	   SET Environment.Variables.Log.Entry.status = 'trigerred';
	   SET Environment.Variables.Log.Entry.destinationQueue = InputRoot.MQDLH.DestQName;
	   SET Environment.Variables.Log.Entry.guid = Environment.Variables.ActivityId;
	   SET Environment.Variables.Log.Entry.aceApplication = ApplicationLabel;
	   SET Environment.Variables.Log.Entry.messageFlow = MessageFlowLabel; 
	   PROPAGATE TO LABEL 'LOG' DELETE NONE;

	  RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO

			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
