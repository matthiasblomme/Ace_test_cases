BROKER SCHEMA com.ibm.test.wwr


CREATE COMPUTE MODULE nullref_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		DECLARE bodyRef REFERENCE TO InputRoot.JSON.Data;
		DECLARE nullRef REFERENCE TO InputRoot.JSON.Data.footer ;
		
		SET OutputRoot.JSON.Data.header = 'null reff result';
		
		DECLARE result CHARACTER;
		DECLARE result2 CHARACTER;
		DECLARE result3 CHARACTER;
		DECLARE result4 CHARACTER;
		DECLARE result5 CHARACTER;
		DECLARE result6 CHARACTER;
		
		-- attempt1
		SET OutputRoot.JSON.Data.attempt.one.test = 'nullRef =  null';
		IF nullRef = null THEN
			SET OutputRoot.JSON.Data.attempt.one.result = 'null';
		ELSE
			SET OutputRoot.JSON.Data.attempt.one.result = 'not null';
		END IF;
		
		-- attempt 2
		SET OutputRoot.JSON.Data.attempt.two.test = 'CARDINALITY(nullRef.*[])';
		SET OutputRoot.JSON.Data.attempt.two.result = CARDINALITY(nullRef.*[]);
		

		-- attempt 3
		SET OutputRoot.JSON.Data.attempt.three.test = '(EXISTS(nullRef.*[]))';
		IF (EXISTS(nullRef.*[])) THEN
			SET OutputRoot.JSON.Data.attempt.three.result = 'exists';
		ELSE
			SET result5 = 'doesnt exists';
		END IF;
		
		--attemt 4
		SET OutputRoot.JSON.Data.attempt.four.test = 'exists reference from item';
		CREATE FIELD OutputRoot.JSON.Data.attempt.four.results IDENTITY (JSON.Array)results;
		DECLARE i INTEGER CARDINALITY(bodyRef.objects.*[]);
		FOR object AS bodyRef.objects.*[] DO
			DECLARE childRef REFERENCE TO object.child;
			IF (EXISTS(childRef.*[])) THEN
				CREATE LASTCHILD OF OutputRoot.JSON.Data.attempt.four.results TYPE NameValue NAME 'result' VALUE FIELDVALUE(childRef.grandchild);
			ELSE
				CREATE LASTCHILD OF OutputRoot.JSON.Data.attempt.four.results TYPE NameValue NAME 'result' VALUE 'no grand child exists';
			END IF;
		END FOR;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
