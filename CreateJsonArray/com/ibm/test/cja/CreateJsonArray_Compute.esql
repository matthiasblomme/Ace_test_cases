BROKER SCHEMA com.ibm.test.cja


CREATE COMPUTE MODULE CreateJsonArray_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		
		-- Create with lastchild call
		CREATE FIELD OutputRoot.JSON.Data.list IDENTITY (JSON.Array)list;
		CREATE LASTCHILD OF OutputRoot.JSON.Data.list TYPE NameValue NAME 'Item' VALUE 'valueA';
		CREATE LASTCHILD OF OutputRoot.JSON.Data.list TYPE NameValue NAME 'Item' VALUE 'valueB';
		CREATE LASTCHILD OF OutputRoot.JSON.Data.list TYPE NameValue NAME 'Item' VALUE 'valueC';
		
		
		-- Create with direct item assign
		CREATE FIELD OutputRoot.JSON.Data.list2 IDENTITY (JSON.Array)list2;
		SET OutputRoot.JSON.Data.list2.Item[1] = 'valueD';
		SET OutputRoot.JSON.Data.list2.Item[2] = 'valueE';
		SET OutputRoot.JSON.Data.list2.Item[3] = 'valueF';
		
		
		-- Create with sub fields
		CREATE FIELD OutputRoot.JSON.Data.list3 IDENTITY (JSON.Array)list3;
		SET OutputRoot.JSON.Data.list3.Item[1]."Code" = 'valueG';
		SET OutputRoot.JSON.Data.list3.Item[2]."Description" = 'valueH';
		SET OutputRoot.JSON.Data.list3.Item[3]."Extra" = 'valueI';
		
		
		-- create with loop and and 1 sub group
		CREATE FIELD OutputRoot.JSON.Data.list4 IDENTITY (JSON.Array)list4;
		DECLARE i INTEGER 1;
		FOR source as OutputRoot.JSON.Data.list3.Item[] DO
			SET OutputRoot.JSON.Data.list4.Item[1].{'entry' || CAST(i AS CHARACTER)} = 'value' || CAST(i AS CHARACTER);
			set i = i + 1;
		END FOR;


		-- create with loop and sub groups
		CREATE FIELD OutputRoot.JSON.Data.list5 IDENTITY (JSON.Array)list5;
		DECLARE j INTEGER 1;
		FOR source as OutputRoot.JSON.Data.list3.Item[] DO
			SET OutputRoot.JSON.Data.list5.Item[j].{'entry' || CAST(j AS CHARACTER)} = 'value' || CAST(j AS CHARACTER);
			set j = j + 1;
		END FOR;


		-- create with loop and sub groups without Item
		CREATE FIELD OutputRoot.JSON.Data.list6 IDENTITY (JSON.Array)list6;
		DECLARE k INTEGER 1;
		FOR source as OutputRoot.JSON.Data.list3.Item[] DO
			SET OutputRoot.JSON.Data.list6.someField[k].{'entry' || CAST(k AS CHARACTER)} = 'value' || CAST(k AS CHARACTER);
			set k = k + 1;
		END FOR;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
